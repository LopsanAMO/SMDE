html(lang='en')
    head
        title Material Didactico
        meta(charset='utf-8')
        meta(name='viewport', content='width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0')
        style.
          body {
          font-family: Monospace;
          background-color: #e0e0e0;
          margin: 0px;
          overflow: hidden;
          }
        script(src='/build/three.min.js')
        link(href='/css/bootstrap.css', rel='stylesheet')
        link(href='/css/stylish-portfolio.css', rel='stylesheet')
        link(href='/font-awesome/css/font-awesome.min.css', rel='stylesheet')
        script(src='/js/libs/stats.min.js')
    body
        noscript
          | se ah detectado que se desactivo JAVASCRIPT, por favor vuelve a activarlo hijo de la chingada!!!
        ul.nav.nav-tabs
          li.active
            a(href='#')  Home 
          li
            a(href='piramide')  Piramide 
          li
            a(href='name')  Tech Corp 
          li
            a(href='cono')  Cono 
          li
            a(href='cilindro')  Cilindro 
          li
            a(href='cubo')  cubo 
          li
            a(href='iso')  Crea Isometrico 
          li
            a(href='actividades')  Extra 
          li
            a(href='poli')  Poligono 
        a#menu-toggle.btn.btn-primary.btn-lg.toggle(href='#')
          i.fa.fa-bars
        #sidebar-wrapper
          ul.sidebar-nav
            a#menu-close.btn.btn-default.btn-lg.pull-right.toggle(href='#')
              i.fa.fa-times
            li.sidebar-brand
              if todo == undefined
                a(href='index') Bienvenido
              else 
                  a(href='index') #{todo[0].Nombre}            
            li
              a(href='index') Home
            if todo == undefined  
            else 
              if todo[0].ID_prof
                li
                  a(href='cprof' ) Datos
              else
                li
                  a(href='calum') Datos
            if todo == undefined
              li
                  a(href='login' ) Ingresa Sesion
              li
                  a(href='registrarse' ) Registrarse  
            else 
            li
              a(href='teoriadb') Teoria
            li
              a(href='ejer1') Ejercicios
            li
              a(href='actividades') Material Didactico
            if todo == undefined  
            else 
              li
                a(href='salir') Cerrar sesion
          script.
            var container, stats;
            var camera, scene, renderer;
            var projector, plane;
            var mouse2D, mouse3D, raycaster, theta = 45,
            isShiftDown = false, isCtrlDown = false,
            target = new THREE.Vector3( 0, 200, 0 );
            var normalMatrix = new THREE.Matrix3();
            var cubeGeometry = new THREE.BoxGeometry( 50, 50, 50 );
            var cubeMaterial = new THREE.MeshLambertMaterial( { color: 006666 , overdraw: 0.5 } );
            var objects = [];
            init();
            animate();
            function init() {
            container = document.createElement( 'div' );
            document.body.appendChild( container );
            var info = document.createElement( 'div' );
            info.style.position = 'absolute';
            info.style.top = '10px';
            info.style.width = '100%';
            info.style.textAlign = 'center';
            container.appendChild( info );
            camera = new THREE.PerspectiveCamera( 40, window.innerWidth / window.innerHeight, 1, 10000 );
            camera.position.y = 800;
            scene = new THREE.Scene();
            // Grid
            var size = 500, step = 50;
            var geometry = new THREE.Geometry();
            for ( var i = - size; i <= size; i += step ) {
            geometry.vertices.push( new THREE.Vector3( - size, 0, i ) );
            geometry.vertices.push( new THREE.Vector3(   size, 0, i ) );
            geometry.vertices.push( new THREE.Vector3( i, 0, - size ) );
            geometry.vertices.push( new THREE.Vector3( i, 0,   size ) );
            }
            var material = new THREE.LineBasicMaterial( { color: 0x000000, opacity: 0.2 } );
            var line = new THREE.Line( geometry, material );
            line.type = THREE.LinePieces;
            scene.add( line );
            //
            projector = new THREE.Projector();
            plane = new THREE.Mesh( new THREE.PlaneGeometry( 1000, 1000 ), new THREE.MeshBasicMaterial() );
            plane.rotation.x = - Math.PI / 2;
            plane.visible = false;
            scene.add( plane );
            objects.push( plane );
            var material = new THREE.MeshBasicMaterial( { color: 0xff0000, wireframe: true } );
            mouse2D = new THREE.Vector3( 0, 10000, 0.5 );
            // Lights
            var ambientLight = new THREE.AmbientLight( 0x606060 );
            scene.add( ambientLight );
            var directionalLight = new THREE.DirectionalLight( 0xffffff );
            directionalLight.position.x = Math.random() - 0.5;
            directionalLight.position.y = Math.random() - 0.5;
            directionalLight.position.z = Math.random() - 0.5;
            directionalLight.position.normalize();
            scene.add( directionalLight );
            var directionalLight = new THREE.DirectionalLight( 0x808080 );
            directionalLight.position.x = Math.random() - 0.5;
            directionalLight.position.y = Math.random() - 0.5;
            directionalLight.position.z = Math.random() - 0.5;
            directionalLight.position.normalize();
            scene.add( directionalLight );
            renderer = new THREE.CanvasRenderer();
            renderer.setClearColor( 0xf0f0f0 );
            renderer.setSize( window.innerWidth, window.innerHeight );
            container.appendChild(renderer.domElement);
            stats = new Stats();
            stats.domElement.style.position = 'absolute';
            stats.domElement.style.top = '0px';
            container.appendChild( stats.domElement );
            document.addEventListener( 'mousemove', onDocumentMouseMove, false );
            document.addEventListener( 'mousedown', onDocumentMouseDown, false );
            document.addEventListener( 'keydown', onDocumentKeyDown, false );
            document.addEventListener( 'keyup', onDocumentKeyUp, false );
            //
            window.addEventListener( 'resize', onWindowResize, false );
            }
            function onWindowResize() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize( window.innerWidth, window.innerHeight );
            }
            function onDocumentMouseMove( event ) {
            event.preventDefault();
            mouse2D.x = ( event.clientX / window.innerWidth ) * 2 - 1;
            mouse2D.y = - ( event.clientY / window.innerHeight ) * 2 + 1;
            var intersects = raycaster.intersectObjects( scene.children );
            if ( intersects.length > 0 ) {
            // TODO
            }
            }
            function onDocumentMouseDown( event ) {
            event.preventDefault();
            var intersects = raycaster.intersectObjects( objects );
            if ( intersects.length > 0 ) {
            var intersect = intersects[ 0 ];
            if ( isShiftDown ) {
            if ( intersect.object != plane ) {
            scene.remove( intersect.object );
            objects.splice( objects.indexOf( intersect.object ), 1 );
            }
            } else {
            normalMatrix.getNormalMatrix( intersect.object.matrixWorld );
            var normal = intersect.face.normal.clone();
            normal.applyMatrix3( normalMatrix ).normalize();
            var voxel = new THREE.Mesh( cubeGeometry, cubeMaterial );
            voxel.position.addVectors( intersect.point, normal );
            voxel.position.divideScalar( 50 ).floor().multiplyScalar( 50 ).addScalar( 25 );
            scene.add( voxel );
            objects.push( voxel );
            }
            }
            }
            function onDocumentKeyDown( event ) {
            switch( event.keyCode ) {
            case 16: isShiftDown = true; break;
            case 17: isCtrlDown = true; break;
            }
            }
            function onDocumentKeyUp( event ) {
            switch( event.keyCode ) {
            case 16: isShiftDown = false; break;
            case 17: isCtrlDown = false; break;
            }
            }
            function save() {
            window.open( renderer.domElement.toDataURL('image/png'), 'mywindow' );
            return false;
            }
            //
            function animate() {
            requestAnimationFrame( animate );
            render();
            stats.update();
            }
            function render() {
            if ( isCtrlDown ) {
            theta += mouse2D.x * 3;
            }
            camera.position.x = 1400 * Math.sin( theta * Math.PI / 360 );
            camera.position.z = 1400 * Math.cos( theta * Math.PI / 360 );
            camera.lookAt( target );
            raycaster = projector.pickingRay( mouse2D.clone(), camera );
            renderer.render( scene, camera );
            }
          script(src='/js/jquery-1.10.2.js')
          script(src='/js/bootstrap.js')
          script.
            $("#menu-close").click(function(e) {
            e.preventDefault();
            $("#sidebar-wrapper").toggleClass("active");
            });
          script.
            $("#menu-toggle").click(function(e) {
            e.preventDefault();
            $("#sidebar-wrapper").toggleClass("active");
            });
          script.
            $(function() {
            $('a[href*=#]:not([href=#])').click(function() {
            if (location.pathname.replace(/^\\//, '') == this.pathname.replace(/^\//, '') || location.hostname == this.hostname) {
            var target = $(this.hash);
            target = target.length ? target : $('[name=' + this.hash.slice(1) + ']');
            if (target.length) {
            $('html,body').animate({
            scrollTop: target.offset().top
            }, 1000);
            return false;
            }
            }
            });
            });
