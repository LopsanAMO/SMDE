html(lang='en')
  head
    title Material Didactico
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0')
    style.
      body {
      font-family: Monospace;
      background-color: #f0f0f0;
      margin: 0px;
      overflow: hidden;
      }
  script(src='/build/three.min.js')
  link(href='/css/bootstrap.css', rel='stylesheet')
  link(href='/css/stylish-portfolio.css', rel='stylesheet')
  link(href='/font-awesome/css/font-awesome.min.css', rel='stylesheet')
  script(src='/js/libs/stats.min.js')
  body
    noscript
      | se ah detectado que se desactivo JAVASCRIPT, por favor vuelve a activarlo hijo de la chingada!!!
    ul.nav.nav-tabs
      li.active
        a(href='#')  Home 
      li
        a(href='piramide')  Piramide 
      li
        a(href='name')  Tech Corp 
      li
        a(href='cono')  Cono 
      li
        a(href='cilindro')  Cilindro 
      li
        a(href='cubo')  cubo 
      li
        a(href='iso')  Crea Isometrico 
      li
        a(href='actividades')  Extra 
      li
        a(href='poli')  Poligono 
    a#menu-toggle.btn.btn-primary.btn-lg.toggle(href='#')
      i.fa.fa-bars
    #sidebar-wrapper
      ul.sidebar-nav
        a#menu-close.btn.btn-default.btn-lg.pull-right.toggle(href='#')
          i.fa.fa-times
        li.sidebar-brand
          if todo == undefined
            a(href='index') Bienvenido
          else 
              a(href='index') #{todo[0].Nombre}            
        li
          a(href='index') Home
        if todo == undefined  
        else 
          if todo[0].ID_prof
            li
              a(href='cprof' ) Datos
          else
            li
              a(href='calum') Datos
        if todo == undefined
          li
              a(href='login' ) Ingresa Sesion
          li
              a(href='registrarse' ) Registrarse  
        else 
        li
          a(href='teoriadb') Teoria
        li
          a(href='ejer1') Ejercicios
        li
          a(href='actividades') Material Didactico
        if todo == undefined  
        else 
          li
            a(href='salir') Cerrar sesion
    script.
      var container, stats;
      var camera, scene, renderer;
      var cube, plane;
      var targetRotation = 0;
      var targetRotationOnMouseDown = 0;
      var mouseX = 0;
      var mouseXOnMouseDown = 0;
      var windowHalfX = window.innerWidth / 2;
      var windowHalfY = window.innerHeight / 2;
      init();
      animate();
      function init() {
      container = document.createElement( 'div' );
      document.body.appendChild( container );
      var info = document.createElement( 'div' );
      info.style.position = 'absolute';
      info.style.top = '10px';
      info.style.width = '100%';
      info.style.textAlign = 'center';
      container.appendChild( info );
      camera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 1, 1000 );
      camera.position.y = 150;
      camera.position.z = 500;
      scene = new THREE.Scene();
      // Cube
      var geometry = new THREE.CubeGeometry( 200, 200, 200 );
      for ( var i = 0; i < geometry.faces.length; i += 2 ) {
      var hex = Math.random() * 0xffffff;
      geometry.faces[ i ].color.setHex( hex );
      geometry.faces[ i + 1 ].color.setHex( hex );
      }
      var material = new THREE.MeshBasicMaterial( { vertexColors: THREE.FaceColors, overdraw: 0.5 } );
      cube = new THREE.Mesh( geometry, material );
      cube.position.y = 150;
      scene.add( cube );
      // Plane
      var geometry = new THREE.PlaneGeometry( 200, 200 );
      geometry.applyMatrix( new THREE.Matrix4().makeRotationX( - Math.PI / 2 ) );
      var material = new THREE.MeshBasicMaterial( { color: 0xe0e0e0, overdraw: 0.5 } );
      plane = new THREE.Mesh( geometry, material );
      scene.add( plane );
      renderer = new THREE.CanvasRenderer();
      renderer.setClearColor( 0xf0f0f0 );
      renderer.setSize( window.innerWidth, window.innerHeight );
      container.appendChild( renderer.domElement );
      stats = new Stats();
      stats.domElement.style.position = 'absolute';
      stats.domElement.style.top = '0px';
      container.appendChild( stats.domElement );
      document.addEventListener( 'mousedown', onDocumentMouseDown, false );
      document.addEventListener( 'touchstart', onDocumentTouchStart, false );
      document.addEventListener( 'touchmove', onDocumentTouchMove, false );
      //
      window.addEventListener( 'resize', onWindowResize, false );
      }
      function onWindowResize() {
      windowHalfX = window.innerWidth / 2;
      windowHalfY = window.innerHeight / 2;
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize( window.innerWidth, window.innerHeight );
      }
      //
      function onDocumentMouseDown( event ) {
      event.preventDefault();
      document.addEventListener( 'mousemove', onDocumentMouseMove, false );
      document.addEventListener( 'mouseup', onDocumentMouseUp, false );
      document.addEventListener( 'mouseout', onDocumentMouseOut, false );
      mouseXOnMouseDown = event.clientX - windowHalfX;
      targetRotationOnMouseDown = targetRotation;
      }
      function onDocumentMouseMove( event ) {
      mouseX = event.clientX - windowHalfX;
      targetRotation = targetRotationOnMouseDown + ( mouseX - mouseXOnMouseDown ) * 0.02;
      }
      function onDocumentMouseUp( event ) {
      document.removeEventListener( 'mousemove', onDocumentMouseMove, false );
      document.removeEventListener( 'mouseup', onDocumentMouseUp, false );
      document.removeEventListener( 'mouseout', onDocumentMouseOut, false );
      }
      function onDocumentMouseOut( event ) {
      document.removeEventListener( 'mousemove', onDocumentMouseMove, false );
      document.removeEventListener( 'mouseup', onDocumentMouseUp, false );
      document.removeEventListener( 'mouseout', onDocumentMouseOut, false );
      }
      function onDocumentTouchStart( event ) {
      if ( event.touches.length === 1 ) {
      event.preventDefault();
      mouseXOnMouseDown = event.touches[ 0 ].pageX - windowHalfX;
      targetRotationOnMouseDown = targetRotation;
      }
      }
      function onDocumentTouchMove( event ) {
      if ( event.touches.length === 1 ) {
      event.preventDefault();
      mouseX = event.touches[ 0 ].pageX - windowHalfX;
      targetRotation = targetRotationOnMouseDown + ( mouseX - mouseXOnMouseDown ) * 0.05;
      }
      }
      //
      function animate() {
      requestAnimationFrame( animate );
      render();
      stats.update();
      }
      function render() {
      plane.rotation.y = cube.rotation.y += ( targetRotation - cube.rotation.y ) * 0.05;
      renderer.render( scene, camera );
      }
    script(src='/js/jquery-1.10.2.js')
    script(src='/js/bootstrap.js')
    script.
      $("#menu-close").click(function(e) {
      e.preventDefault();
      $("#sidebar-wrapper").toggleClass("active");
      });
    script.
      $("#menu-toggle").click(function(e) {
      e.preventDefault();
      $("#sidebar-wrapper").toggleClass("active");
      });
    script.
      $(function() {
      $('a[href*=#]:not([href=#])').click(function() {
      if (location.pathname.replace(/^\\//, '') == this.pathname.replace(/^\//, '') || location.hostname == this.hostname) {
      var target = $(this.hash);
      target = target.length ? target : $('[name=' + this.hash.slice(1) + ']');
      if (target.length) {
      $('html,body').animate({
      scrollTop: target.offset().top
      }, 1000);
      return false;
      }
      }
      });
      });
